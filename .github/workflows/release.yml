name: Release

on:
  schedule:
    - cron: '0 0 * * 4'  # Every Thursday at midnight UTC
  workflow_dispatch:     # Allow manual trigger

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check.outputs.has-changes }}
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '6.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v1.1.1
      id: gitversion

    - name: Check for new commits
      id: check
      run: |
        COMMITS_SINCE_TAG=$(git rev-list $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD")..HEAD --count 2>/dev/null || echo "1")
        echo "Commits since last tag: $COMMITS_SINCE_TAG"
        if [ "$COMMITS_SINCE_TAG" -gt "0" ]; then
          echo "has-changes=true" >> $GITHUB_OUTPUT
        else
          echo "has-changes=false" >> $GITHUB_OUTPUT
        fi

  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    needs: check-changes
    if: needs.check-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '6.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v1.1.1

    - name: Restore dependencies
      run: dotnet restore
      working-directory: Guinevere

    - name: Run tests and build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: ./build.sh Test Compile
      working-directory: Guinevere

    - name: Run tests and build (Windows)
      if: matrix.os == 'windows-latest'
      run: .\build.cmd Test Compile
      working-directory: Guinevere

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          Guinevere/coverage/**/*
          Guinevere/TestResults/**/*

  create-packages:
    name: Create Packages
    runs-on: ubuntu-latest
    needs: [check-changes, build-and-test]
    if: needs.check-changes.outputs.has-changes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '6.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v1.1.1

    - name: Create NuGet packages
      run: ./build.sh PackNuGet
      working-directory: Guinevere

    - name: Create sample packages
      run: ./build.sh PackageSamples
      working-directory: Guinevere

    - name: Upload NuGet packages
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: Guinevere/packages/*.nupkg

    - name: Upload sample packages
      uses: actions/upload-artifact@v4
      with:
        name: sample-packages
        path: Guinevere/samples-output/*.zip

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-changes, create-packages]
    if: needs.check-changes.outputs.has-changes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '6.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v1.1.1

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: Guinevere/packages

    - name: Download sample packages
      uses: actions/download-artifact@v4
      with:
        name: sample-packages
        path: Guinevere/samples-output

    - name: Update changelog and create release
      run: ./build.sh UpdateChangelog CreateTag CreateGitHubRelease
      working-directory: Guinevere
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [check-changes, create-release]
    if: needs.check-changes.outputs.has-changes == 'true'
    environment: nuget-publishing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '6.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v1.1.1

    - name: Download NuGet packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: Guinevere/packages

    - name: Publish to NuGet
      run: ./build.sh PublishNuGet
      working-directory: Guinevere
      env:
        NuGetApiKey: ${{ secrets.NUGET_API_KEY }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [check-changes, create-release, publish-nuget]
    if: always()
    
    steps:
    - name: Delete artifacts
      uses: geekyeggo/delete-artifact@v4
      with:
        name: |
          test-results-ubuntu-latest
          test-results-windows-latest
          nuget-packages
          sample-packages
        failOnError: false